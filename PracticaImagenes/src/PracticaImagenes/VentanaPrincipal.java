/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PracticaImagenes;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import static java.lang.Math.sin;
import static java.lang.Math.toRadians;
import javax.imageio.ImageIO;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.erc.image.OperacionPixel;
import sm.erc.image.SepiaOp;
import sm.erc.iu.ColorBox;
import sm.erc.iu.Tool;
import sm.erc.iu.Lienzo2DImagen;
import sm.erc.iu.ModoRelleno;
import sm.image.EqualizationOp;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.TintOp;
import sm.sound.SMClipPlayer;
import sm.sound.SMPlayer;
import sm.sound.SMRecorder;
import sm.sound.SMSoundRecorder;
import sm.erc.image.OperacionComp;
import static java.lang.Math.cos;
import java.util.Arrays;
import uk.co.caprica.vlcj.filter.VideoFileFilter;
import static java.lang.Math.abs;

/**
 * Representa una ventana que hereda de JFrame y gestiona eventos de ratón y de acción de botones, menús
 * y otros elementos asociados a las distintas ventanas internas que puede contener.
 * @version 1.0
 * @author Elena Romero Contreras
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    private BufferedImage imgSource;
    private SMPlayer player = null;
    private SMRecorder recorder = null;
    
    /**
     * Crea una VentanaPrincipal.
     * Establece tamaño, título y desactiva algunas barras por defecto.
     */
    public VentanaPrincipal() {
        initComponents();
        this.setSize(2000, 1000);
        this.setTitle("Aplicación Multimedia");
        this.comboColor1.setRenderer(new ColorBox());
        this.comboColor2.setRenderer(new ColorBox());
        this.comboColorTrazo.setRenderer(new ColorBox());
        this.barraAudio.setVisible(false);
        this.barraImagen.setVisible(false);
        this.barraDibujo.setVisible(false);
        this.botonCaptura.setVisible(false);
        this.botonGuardar.setEnabled(false);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panelSuperior = new javax.swing.JPanel();
        barraGeneral = new javax.swing.JToolBar();
        botonNuevo = new javax.swing.JButton();
        botonAbrir = new javax.swing.JButton();
        botonGuardar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        botonWebcam = new javax.swing.JButton();
        botonCaptura = new javax.swing.JButton();
        barraDibujo = new javax.swing.JToolBar();
        panelHerr = new javax.swing.JPanel();
        botonPunto = new javax.swing.JToggleButton();
        botonLinea = new javax.swing.JToggleButton();
        botonRect = new javax.swing.JToggleButton();
        botonElipse = new javax.swing.JToggleButton();
        botonLibre = new javax.swing.JToggleButton();
        botonRoundRect = new javax.swing.JToggleButton();
        botonCurva = new javax.swing.JToggleButton();
        botonCorona = new javax.swing.JToggleButton();
        panelSelec = new javax.swing.JPanel();
        botonSelec = new javax.swing.JToggleButton();
        comboOrden = new javax.swing.JComboBox<>();
        panelTrazo = new javax.swing.JPanel();
        Color[] colores = new Color[]{Color.BLACK, Color.RED, Color.BLUE, Color.WHITE, Color.YELLOW, Color.GREEN};
        comboColorTrazo = new javax.swing.JComboBox<Color>(colores);
        botonColorT = new javax.swing.JButton();
        comboTrazo = new javax.swing.JComboBox<>();
        spinnerGrosor = new javax.swing.JSpinner();
        jSeparator2 = new javax.swing.JSeparator();
        botonAlisar = new javax.swing.JToggleButton();
        panelRelleno = new javax.swing.JPanel();
        comboColor1 = new javax.swing.JComboBox<Color>(colores);
        botonColor1 = new javax.swing.JButton();
        comboColor2 = new javax.swing.JComboBox<Color>(colores);
        botonColor2 = new javax.swing.JButton();
        comboRelleno = new javax.swing.JComboBox<>();
        panelTransp = new javax.swing.JPanel();
        sliderTransp = new javax.swing.JSlider();
        barraAudio = new javax.swing.JToolBar();
        botonGrabar = new javax.swing.JToggleButton();
        botonPlay = new javax.swing.JButton();
        botonStop = new javax.swing.JButton();
        listaAudio = new javax.swing.JComboBox<>();
        panelInferior = new javax.swing.JPanel();
        barraImagen = new javax.swing.JToolBar();
        jPanel4 = new javax.swing.JPanel();
        sliderBrillo = new javax.swing.JSlider();
        jPanel2 = new javax.swing.JPanel();
        comboFiltro = new javax.swing.JComboBox<>();
        jPanel6 = new javax.swing.JPanel();
        botonCont = new javax.swing.JButton();
        botonIlu = new javax.swing.JButton();
        botonOsc = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        botonDuplicar = new javax.swing.JButton();
        botonSin = new javax.swing.JButton();
        botonCos = new javax.swing.JButton();
        botonSepia = new javax.swing.JButton();
        botonNeg = new javax.swing.JButton();
        botonOpPixel = new javax.swing.JButton();
        botonOpComp = new javax.swing.JButton();
        bontonTintar = new javax.swing.JButton();
        botonEcualizador = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        botonBandas = new javax.swing.JButton();
        comboEspacioColor = new javax.swing.JComboBox<>();
        jPanel8 = new javax.swing.JPanel();
        sliderGiro = new javax.swing.JSlider();
        botonGiro90 = new javax.swing.JButton();
        botonGiro180 = new javax.swing.JButton();
        botonGiro270 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        botonMas = new javax.swing.JButton();
        botonMenos = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        estado = new javax.swing.JLabel();
        labelCoord = new javax.swing.JLabel();
        escritorio = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuNuevo = new javax.swing.JMenuItem();
        menuAbrir = new javax.swing.JMenuItem();
        menuGuardar = new javax.swing.JMenuItem();
        menuVer = new javax.swing.JMenu();
        checkBoxEstado = new javax.swing.JCheckBoxMenuItem();
        checkBoxImagen = new javax.swing.JCheckBoxMenuItem();
        checkBoxGraficos = new javax.swing.JCheckBoxMenuItem();
        checkBoxAudio = new javax.swing.JCheckBoxMenuItem();
        menuAyuda = new javax.swing.JMenu();
        menuInfo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelSuperior.setLayout(new java.awt.BorderLayout());

        barraGeneral.setRollover(true);
        barraGeneral.setPreferredSize(new java.awt.Dimension(1400, 40));

        botonNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/nuevo.png"))); // NOI18N
        botonNuevo.setToolTipText("Nuevo lienzo");
        botonNuevo.setFocusable(false);
        botonNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoActionPerformed(evt);
            }
        });
        barraGeneral.add(botonNuevo);

        botonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/abrir.png"))); // NOI18N
        botonAbrir.setToolTipText("Abrir fichero");
        botonAbrir.setFocusable(false);
        botonAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbrirActionPerformed(evt);
            }
        });
        barraGeneral.add(botonAbrir);

        botonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/guardar.png"))); // NOI18N
        botonGuardar.setToolTipText("Guardar fichero");
        botonGuardar.setFocusable(false);
        botonGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });
        barraGeneral.add(botonGuardar);
        barraGeneral.add(jSeparator1);

        botonWebcam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/camara.png"))); // NOI18N
        botonWebcam.setToolTipText("Abrir Webcam");
        botonWebcam.setFocusable(false);
        botonWebcam.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonWebcam.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonWebcam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonWebcamActionPerformed(evt);
            }
        });
        barraGeneral.add(botonWebcam);

        botonCaptura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/capturar.png"))); // NOI18N
        botonCaptura.setToolTipText("Captura imagen Webcam");
        botonCaptura.setFocusable(false);
        botonCaptura.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonCaptura.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonCaptura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCapturaActionPerformed(evt);
            }
        });
        barraGeneral.add(botonCaptura);

        panelSuperior.add(barraGeneral, java.awt.BorderLayout.PAGE_START);

        barraDibujo.setRollover(true);
        barraDibujo.setPreferredSize(new java.awt.Dimension(100, 90));

        panelHerr.setBorder(javax.swing.BorderFactory.createTitledBorder("Herramientas"));
        panelHerr.setPreferredSize(new java.awt.Dimension(360, 80));
        panelHerr.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        buttonGroup1.add(botonPunto);
        botonPunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/punto.png"))); // NOI18N
        botonPunto.setToolTipText("Punto");
        botonPunto.setFocusable(false);
        botonPunto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonPunto.setPreferredSize(new java.awt.Dimension(40, 40));
        botonPunto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonPunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPuntoActionPerformed(evt);
            }
        });
        panelHerr.add(botonPunto);

        buttonGroup1.add(botonLinea);
        botonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/linea.png"))); // NOI18N
        botonLinea.setToolTipText("Línea");
        botonLinea.setFocusable(false);
        botonLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonLinea.setPreferredSize(new java.awt.Dimension(40, 40));
        botonLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLineaActionPerformed(evt);
            }
        });
        panelHerr.add(botonLinea);

        buttonGroup1.add(botonRect);
        botonRect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/rectangulo.png"))); // NOI18N
        botonRect.setToolTipText("Rectángulo");
        botonRect.setFocusable(false);
        botonRect.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRect.setPreferredSize(new java.awt.Dimension(40, 40));
        botonRect.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRectActionPerformed(evt);
            }
        });
        panelHerr.add(botonRect);

        buttonGroup1.add(botonElipse);
        botonElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/elipse.png"))); // NOI18N
        botonElipse.setToolTipText("Elipse");
        botonElipse.setFocusable(false);
        botonElipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonElipse.setPreferredSize(new java.awt.Dimension(40, 40));
        botonElipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonElipseActionPerformed(evt);
            }
        });
        panelHerr.add(botonElipse);

        buttonGroup1.add(botonLibre);
        botonLibre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/lapiz.gif"))); // NOI18N
        botonLibre.setToolTipText("Trazo libre");
        botonLibre.setFocusable(false);
        botonLibre.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonLibre.setPreferredSize(new java.awt.Dimension(40, 40));
        botonLibre.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonLibre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLibreActionPerformed(evt);
            }
        });
        panelHerr.add(botonLibre);

        buttonGroup1.add(botonRoundRect);
        botonRoundRect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/roundrect.png"))); // NOI18N
        botonRoundRect.setToolTipText("Rectángulo redondeado");
        botonRoundRect.setPreferredSize(new java.awt.Dimension(40, 40));
        botonRoundRect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRoundRectActionPerformed(evt);
            }
        });
        panelHerr.add(botonRoundRect);

        buttonGroup1.add(botonCurva);
        botonCurva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/curva.png"))); // NOI18N
        botonCurva.setToolTipText("Curva con un punto de control");
        botonCurva.setPreferredSize(new java.awt.Dimension(40, 40));
        botonCurva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCurvaActionPerformed(evt);
            }
        });
        panelHerr.add(botonCurva);

        buttonGroup1.add(botonCorona);
        botonCorona.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/corona.png"))); // NOI18N
        botonCorona.setToolTipText("Corona elíptica");
        botonCorona.setPreferredSize(new java.awt.Dimension(40, 40));
        botonCorona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCoronaActionPerformed(evt);
            }
        });
        panelHerr.add(botonCorona);

        barraDibujo.add(panelHerr);

        panelSelec.setBorder(javax.swing.BorderFactory.createTitledBorder("Selección"));
        panelSelec.setToolTipText("Selección");
        panelSelec.setPreferredSize(new java.awt.Dimension(210, 80));
        panelSelec.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        buttonGroup1.add(botonSelec);
        botonSelec.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/seleccion.png"))); // NOI18N
        botonSelec.setToolTipText("Seleccionar");
        botonSelec.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        botonSelec.setFocusable(false);
        botonSelec.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonSelec.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonSelec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSelecActionPerformed(evt);
            }
        });
        panelSelec.add(botonSelec);

        comboOrden.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Enviar al fondo", "Traer al frente", "Enviar atrás", "Traer adelante" }));
        comboOrden.setToolTipText("Orden figuras");
        comboOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboOrdenActionPerformed(evt);
            }
        });
        panelSelec.add(comboOrden);

        barraDibujo.add(panelSelec);

        panelTrazo.setBorder(javax.swing.BorderFactory.createTitledBorder("Trazo"));
        panelTrazo.setAlignmentX(0.0F);
        panelTrazo.setAlignmentY(0.0F);
        panelTrazo.setPreferredSize(new java.awt.Dimension(300, 80));
        panelTrazo.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        /*
        comboColorTrazo.setToolTipText("Color trazo");
        */
        comboColorTrazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboColorTrazoActionPerformed(evt);
            }
        });
        panelTrazo.add(comboColorTrazo);

        botonColorT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/color.png"))); // NOI18N
        botonColorT.setToolTipText("Más colores");
        botonColorT.setPreferredSize(new java.awt.Dimension(40, 40));
        botonColorT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonColorTActionPerformed(evt);
            }
        });
        panelTrazo.add(botonColorT);

        comboTrazo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Continuo", "Discontinuo", "Puntos" }));
        comboTrazo.setToolTipText("Continuidad del trazo");
        comboTrazo.setPreferredSize(new java.awt.Dimension(90, 27));
        comboTrazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTrazoActionPerformed(evt);
            }
        });
        panelTrazo.add(comboTrazo);

        spinnerGrosor.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        spinnerGrosor.setToolTipText("Grosor");
        spinnerGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerGrosorStateChanged(evt);
            }
        });
        panelTrazo.add(spinnerGrosor);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        panelTrazo.add(jSeparator2);

        botonAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/alisar.png"))); // NOI18N
        botonAlisar.setToolTipText("Alisar");
        botonAlisar.setFocusable(false);
        botonAlisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAlisar.setPreferredSize(new java.awt.Dimension(40, 40));
        botonAlisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAlisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAlisarActionPerformed(evt);
            }
        });
        panelTrazo.add(botonAlisar);

        barraDibujo.add(panelTrazo);

        panelRelleno.setBorder(javax.swing.BorderFactory.createTitledBorder("Relleno"));
        panelRelleno.setAlignmentX(0.0F);
        panelRelleno.setAlignmentY(0.0F);
        panelRelleno.setPreferredSize(new java.awt.Dimension(330, 80));
        panelRelleno.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        comboColor1.setToolTipText("Color relleno");
        comboColor1.setAlignmentX(0.0F);
        comboColor1.setAlignmentY(0.0F);
        comboColor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboColor1ActionPerformed(evt);
            }
        });
        panelRelleno.add(comboColor1);

        botonColor1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/color.png"))); // NOI18N
        botonColor1.setToolTipText("Más colores");
        botonColor1.setPreferredSize(new java.awt.Dimension(40, 40));
        botonColor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonColor1ActionPerformed(evt);
            }
        });
        panelRelleno.add(botonColor1);

        comboColor2.setToolTipText("Color relleno");
        comboColor2.setAlignmentX(0.0F);
        comboColor2.setAlignmentY(0.0F);
        comboColor2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboColor2ActionPerformed(evt);
            }
        });
        panelRelleno.add(comboColor2);

        botonColor2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/color.png"))); // NOI18N
        botonColor2.setToolTipText("Más colores");
        botonColor2.setPreferredSize(new java.awt.Dimension(40, 40));
        botonColor2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonColor2ActionPerformed(evt);
            }
        });
        panelRelleno.add(botonColor2);

        comboRelleno.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sin relleno", "Relleno liso", "Degradado horizontal", "Degradado vertical", "Degradado diagonal", "Relleno radial" }));
        comboRelleno.setPreferredSize(new java.awt.Dimension(100, 27));
        comboRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboRellenoActionPerformed(evt);
            }
        });
        panelRelleno.add(comboRelleno);

        barraDibujo.add(panelRelleno);

        panelTransp.setBorder(javax.swing.BorderFactory.createTitledBorder("Transparencia"));
        panelTransp.setOpaque(false);
        panelTransp.setPreferredSize(new java.awt.Dimension(130, 80));
        panelTransp.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        sliderTransp.setToolTipText("Nivel transparencia");
        sliderTransp.setValue(100);
        sliderTransp.setPreferredSize(new java.awt.Dimension(110, 41));
        sliderTransp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderTranspStateChanged(evt);
            }
        });
        panelTransp.add(sliderTransp);

        barraDibujo.add(panelTransp);

        panelSuperior.add(barraDibujo, java.awt.BorderLayout.PAGE_END);

        barraAudio.setRollover(true);
        barraAudio.setPreferredSize(new java.awt.Dimension(1400, 40));

        botonGrabar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/stopRecord24x24.png"))); // NOI18N
        botonGrabar.setFocusable(false);
        botonGrabar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGrabar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGrabarActionPerformed(evt);
            }
        });
        barraAudio.add(botonGrabar);

        botonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/play24x24.png"))); // NOI18N
        botonPlay.setFocusable(false);
        botonPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPlayActionPerformed(evt);
            }
        });
        barraAudio.add(botonPlay);

        botonStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/stop24x24.png"))); // NOI18N
        botonStop.setFocusable(false);
        botonStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonStopActionPerformed(evt);
            }
        });
        barraAudio.add(botonStop);

        listaAudio.setToolTipText("Lista reproducción");
        listaAudio.setPreferredSize(new java.awt.Dimension(150, 27));
        barraAudio.add(listaAudio);

        panelSuperior.add(barraAudio, java.awt.BorderLayout.WEST);

        getContentPane().add(panelSuperior, java.awt.BorderLayout.NORTH);

        panelInferior.setRequestFocusEnabled(false);

        barraImagen.setRollover(true);
        barraImagen.setPreferredSize(new java.awt.Dimension(100, 90));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Brillo"));
        jPanel4.setPreferredSize(new java.awt.Dimension(125, 80));
        jPanel4.setLayout(new java.awt.BorderLayout());

        sliderBrillo.setMaximum(255);
        sliderBrillo.setMinimum(-255);
        sliderBrillo.setToolTipText("Brillo");
        sliderBrillo.setValue(0);
        sliderBrillo.setPreferredSize(new java.awt.Dimension(125, 41));
        sliderBrillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderBrilloStateChanged(evt);
            }
        });
        sliderBrillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusLost(evt);
            }
        });
        jPanel4.add(sliderBrillo, java.awt.BorderLayout.CENTER);

        barraImagen.add(jPanel4);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro"));
        jPanel2.setPreferredSize(new java.awt.Dimension(120, 80));
        jPanel2.setLayout(new java.awt.BorderLayout());

        comboFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media 3x3", "Media 5x5", "Media 7x7", "Binomial", "Enfoque", "Relieve", "Laplaciano" }));
        comboFiltro.setToolTipText("Filtros");
        comboFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFiltroActionPerformed(evt);
            }
        });
        jPanel2.add(comboFiltro, java.awt.BorderLayout.CENTER);

        barraImagen.add(jPanel2);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Contraste"));
        jPanel6.setPreferredSize(new java.awt.Dimension(150, 80));
        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        botonCont.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/contraste.png"))); // NOI18N
        botonCont.setToolTipText("Contraste");
        botonCont.setPreferredSize(new java.awt.Dimension(40, 40));
        botonCont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContActionPerformed(evt);
            }
        });
        jPanel6.add(botonCont);

        botonIlu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/iluminar.png"))); // NOI18N
        botonIlu.setToolTipText("Iluminar");
        botonIlu.setPreferredSize(new java.awt.Dimension(40, 40));
        botonIlu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIluActionPerformed(evt);
            }
        });
        jPanel6.add(botonIlu);

        botonOsc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/oscurecer.png"))); // NOI18N
        botonOsc.setToolTipText("Oscurecer");
        botonOsc.setPreferredSize(new java.awt.Dimension(40, 40));
        botonOsc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOscActionPerformed(evt);
            }
        });
        jPanel6.add(botonOsc);

        barraImagen.add(jPanel6);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("-"));
        jPanel7.setMinimumSize(new java.awt.Dimension(120, 60));
        jPanel7.setPreferredSize(new java.awt.Dimension(400, 80));
        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        botonDuplicar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/copy.png"))); // NOI18N
        botonDuplicar.setToolTipText("Duplicar imagen");
        botonDuplicar.setPreferredSize(new java.awt.Dimension(40, 40));
        botonDuplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDuplicarActionPerformed(evt);
            }
        });
        jPanel7.add(botonDuplicar);

        botonSin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/sinusoidal.png"))); // NOI18N
        botonSin.setToolTipText("Operador sinusoidal");
        botonSin.setPreferredSize(new java.awt.Dimension(40, 40));
        botonSin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSinActionPerformed(evt);
            }
        });
        jPanel7.add(botonSin);

        botonCos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/cos.png"))); // NOI18N
        botonCos.setToolTipText("Coseno");
        botonCos.setPreferredSize(new java.awt.Dimension(40, 40));
        botonCos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCosActionPerformed(evt);
            }
        });
        jPanel7.add(botonCos);

        botonSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/sepia.png"))); // NOI18N
        botonSepia.setToolTipText("Sepia");
        botonSepia.setPreferredSize(new java.awt.Dimension(40, 40));
        botonSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSepiaActionPerformed(evt);
            }
        });
        jPanel7.add(botonSepia);

        botonNeg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/negativo.png"))); // NOI18N
        botonNeg.setToolTipText("Negativo");
        botonNeg.setPreferredSize(new java.awt.Dimension(40, 40));
        botonNeg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNegActionPerformed(evt);
            }
        });
        jPanel7.add(botonNeg);

        botonOpPixel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/op.png"))); // NOI18N
        botonOpPixel.setToolTipText("Operación píxel");
        botonOpPixel.setPreferredSize(new java.awt.Dimension(40, 40));
        botonOpPixel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOpPixelActionPerformed(evt);
            }
        });
        jPanel7.add(botonOpPixel);

        botonOpComp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/op.png"))); // NOI18N
        botonOpComp.setToolTipText("Operación componente");
        botonOpComp.setPreferredSize(new java.awt.Dimension(40, 40));
        botonOpComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOpCompActionPerformed(evt);
            }
        });
        jPanel7.add(botonOpComp);

        bontonTintar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/tintar.png"))); // NOI18N
        bontonTintar.setToolTipText("Tintado");
        bontonTintar.setPreferredSize(new java.awt.Dimension(40, 40));
        bontonTintar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bontonTintarActionPerformed(evt);
            }
        });
        jPanel7.add(bontonTintar);

        botonEcualizador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/ecualizar.png"))); // NOI18N
        botonEcualizador.setToolTipText("Ecualizador");
        botonEcualizador.setPreferredSize(new java.awt.Dimension(40, 40));
        botonEcualizador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEcualizadorActionPerformed(evt);
            }
        });
        jPanel7.add(botonEcualizador);

        barraImagen.add(jPanel7);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Color"));
        jPanel10.setPreferredSize(new java.awt.Dimension(140, 80));
        jPanel10.setVerifyInputWhenFocusTarget(false);
        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 2, 0));

        botonBandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/bandas.png"))); // NOI18N
        botonBandas.setToolTipText("Obtener bandas de color");
        botonBandas.setPreferredSize(new java.awt.Dimension(40, 40));
        botonBandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBandasActionPerformed(evt);
            }
        });
        jPanel10.add(botonBandas);

        comboEspacioColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RGB", "YCC", "GREY" }));
        comboEspacioColor.setToolTipText("Espacio de color");
        comboEspacioColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboEspacioColorActionPerformed(evt);
            }
        });
        jPanel10.add(comboEspacioColor);

        barraImagen.add(jPanel10);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotación"));
        jPanel8.setPreferredSize(new java.awt.Dimension(280, 80));
        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 2, 0));

        sliderGiro.setMajorTickSpacing(90);
        sliderGiro.setMaximum(360);
        sliderGiro.setPaintTicks(true);
        sliderGiro.setToolTipText("Rotar imagen");
        sliderGiro.setValue(0);
        sliderGiro.setPreferredSize(new java.awt.Dimension(120, 40));
        sliderGiro.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGiroStateChanged(evt);
            }
        });
        sliderGiro.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderGiroFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderGiroFocusLost(evt);
            }
        });
        jPanel8.add(sliderGiro);

        botonGiro90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/rotacion90.png"))); // NOI18N
        botonGiro90.setToolTipText("Rotar 90º");
        botonGiro90.setPreferredSize(new java.awt.Dimension(40, 40));
        botonGiro90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGiro90ActionPerformed(evt);
            }
        });
        jPanel8.add(botonGiro90);

        botonGiro180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/rotacion180.png"))); // NOI18N
        botonGiro180.setToolTipText("Rotar 180º");
        botonGiro180.setPreferredSize(new java.awt.Dimension(40, 40));
        botonGiro180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGiro180ActionPerformed(evt);
            }
        });
        jPanel8.add(botonGiro180);

        botonGiro270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/rotacion270.png"))); // NOI18N
        botonGiro270.setToolTipText("Rotar 270º");
        botonGiro270.setPreferredSize(new java.awt.Dimension(40, 40));
        botonGiro270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGiro270ActionPerformed(evt);
            }
        });
        jPanel8.add(botonGiro270);

        barraImagen.add(jPanel8);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Escala"));
        jPanel9.setPreferredSize(new java.awt.Dimension(110, 80));
        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        botonMas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/aumentar.png"))); // NOI18N
        botonMas.setToolTipText("Aumentar tamaño");
        botonMas.setPreferredSize(new java.awt.Dimension(40, 40));
        botonMas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMasActionPerformed(evt);
            }
        });
        jPanel9.add(botonMas);

        botonMenos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PracticaImagenes/disminuir.png"))); // NOI18N
        botonMenos.setToolTipText("Disminuir tamaño");
        botonMenos.setPreferredSize(new java.awt.Dimension(40, 40));
        botonMenos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMenosActionPerformed(evt);
            }
        });
        jPanel9.add(botonMenos);

        barraImagen.add(jPanel9);

        estado.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        estado.setText("Estado");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(estado)
                .addGap(391, 391, 391))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(estado)
                .addGap(5, 5, 5))
        );

        labelCoord.setText("Coord");

        javax.swing.GroupLayout panelInferiorLayout = new javax.swing.GroupLayout(panelInferior);
        panelInferior.setLayout(panelInferiorLayout);
        panelInferiorLayout.setHorizontalGroup(
            panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(barraImagen, javax.swing.GroupLayout.DEFAULT_SIZE, 1398, Short.MAX_VALUE)
            .addGroup(panelInferiorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelCoord)
                .addContainerGap())
        );
        panelInferiorLayout.setVerticalGroup(
            panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInferiorLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(barraImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelCoord)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        getContentPane().add(panelInferior, java.awt.BorderLayout.PAGE_END);

        escritorio.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                escritorioMouseMoved(evt);
            }
        });
        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        menuArchivo.setText("Archivo");

        menuNuevo.setText("Nuevo");
        menuNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(menuNuevo);

        menuAbrir.setText("Abrir");
        menuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(menuAbrir);

        menuGuardar.setText("Guardar");
        menuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(menuGuardar);

        jMenuBar1.add(menuArchivo);

        menuVer.setText("Ver");

        checkBoxEstado.setSelected(true);
        checkBoxEstado.setText("Ver barra de estado");
        checkBoxEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxEstadoActionPerformed(evt);
            }
        });
        menuVer.add(checkBoxEstado);

        checkBoxImagen.setText("Ver barra de imágenes");
        checkBoxImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxImagenActionPerformed(evt);
            }
        });
        menuVer.add(checkBoxImagen);

        checkBoxGraficos.setText("Ver barra de gráficos");
        checkBoxGraficos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxGraficosActionPerformed(evt);
            }
        });
        menuVer.add(checkBoxGraficos);

        checkBoxAudio.setText("Ver barra de audio");
        checkBoxAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAudioActionPerformed(evt);
            }
        });
        menuVer.add(checkBoxAudio);

        jMenuBar1.add(menuVer);

        menuAyuda.setText("Ayuda");

        menuInfo.setText("Acerca de");
        menuInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuInfoActionPerformed(evt);
            }
        });
        menuAyuda.add(menuInfo);

        jMenuBar1.add(menuAyuda);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Resetea botones según los atributos activos del Lienzo2DImagen de la VentanaInternaImagen
     * seleccionada.
     */
    public void reset(){
        buttonGroup1.clearSelection();
        VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
        if(vi!=null){
            Lienzo2DImagen li = vi.getLienzo();
            if(li.getTool()!=null){
                switch(li.getTool()){
                    case PUNTO:
                        botonPunto.setSelected(true);
                    break;
                    case LINEA:
                        botonLinea.setSelected(true);
                    break;
                    case RECTANGULO:
                        botonRect.setSelected(true);
                    break;
                    case ELIPSE: 
                        botonElipse.setSelected(true);
                    break;
                    case ROUND_RECT:
                        botonRoundRect.setSelected(true);     
                    break;
                    case LIBRE:
                        botonLibre.setSelected(true);
                    break;
                    case CURVA:
                        botonCurva.setSelected(true);
                    break;
                    case CORONA:
                        botonCorona.setSelected(true);
                    break;
                    
                    default:      
                }
            }

            if(li.getEditar()) botonSelec.setSelected(true);
            else botonSelec.setSelected(false);
            
            if(li.getAlisar()) botonAlisar.setSelected(true);
            else botonAlisar.setSelected(false);
            
            comboColor1.setSelectedItem(li.getColor());
            comboColor2.setSelectedItem(li.getColor2());
            comboColorTrazo.setSelectedItem(li.getColorTrazo());
            spinnerGrosor.setValue(li.getGrosor());
            comboRelleno.setSelectedItem(li.getModoRelleno());
            comboTrazo.setSelectedItem(li.getEstiloTrazo());
        }
        
    }
    
    /**
     * Muestra etiqueta con las coordenadas del píxel del lienzo de VentanaInternaImagen
     * sobre el que está situado el ratón.
     * @param evt evento que se produce al mover el ratón sobre Lienzo2DImagen
     */
    public void setCoord(java.awt.event.MouseEvent evt){
        int coordX = evt.getX();
        int coordY = evt.getY();
        String text ="("+coordX+", "+coordY+")";
        labelCoord.setText(text);
    }

    /**
     * Llama al método que activa el item menuNuevo
     * @param evt evento que se produce al pulsar el botón botonNuevo
     */
    private void botonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoActionPerformed
        menuNuevoActionPerformed(evt);
    }//GEN-LAST:event_botonNuevoActionPerformed

    /**
     * Llama al método que activa el item menuAbrir
     * @param evt evento que se produce al pulsar el botón botonAbrir
     */
    private void botonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirActionPerformed
        menuAbrirActionPerformed(evt);
    }//GEN-LAST:event_botonAbrirActionPerformed

    /**
     * Llama al método que activa el item menuGuardar
     * @param evt evento que se produce al pulsar el botón botonGuardar
     */
    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        menuGuardarActionPerformed(evt);
    }//GEN-LAST:event_botonGuardarActionPerformed
    
    /**
     * Visibiliza/oculta la barra de dibujo según estado de checkBoxGraficos
     * @param evt evento que se produce al marcar/desmarcar checkBoxGraficos
     */
    private void checkBoxGraficosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxGraficosActionPerformed
        this.barraDibujo.setVisible(checkBoxGraficos.getState());   
    }//GEN-LAST:event_checkBoxGraficosActionPerformed
    /**
     * Visibiliza/oculta la barra de dibujo según estado de checkBoxEstado
     * @param evt evento que se produce al marcar/desmarcar checkBoxEstado
     */
    private void checkBoxEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxEstadoActionPerformed
        this.jPanel5.setVisible(checkBoxEstado.getState());
        this.labelCoord.setVisible(checkBoxEstado.getState());
    }//GEN-LAST:event_checkBoxEstadoActionPerformed
    /**
     * Visibiliza/oculta la barra de dibujo según estado de checkBoxImagen
     * @param evt evento que se produce al marcar/desmarcar checkBoxImagen
     */
    private void checkBoxImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxImagenActionPerformed
        // TODO add your handling code here:
        this.barraImagen.setVisible(checkBoxImagen.getState());
    }//GEN-LAST:event_checkBoxImagenActionPerformed
   
    /**
     * Llama al método que modifica el color de relleno del objeto Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * Si se activa sin estar seleccionada una VentanaInternaImagen, no se hace nada
     * @param evt evento que se produce al pulsar item de comboColor
     */
    private void comboColor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboColor1ActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi= (VentanaInternaImagen)escritorio.getSelectedFrame();
            Color color = (Color) comboColor1.getSelectedItem();
            if(vi != null){
                vi.getLienzo().setColor(color);                
            }
        }
        
    }//GEN-LAST:event_comboColor1ActionPerformed
   

    /**
     * Llama al método que cambia a PUNTO la herramienta activa del Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * @param evt evento que se produce al pulsar el botón botonPunto
     */
    private void botonPuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPuntoActionPerformed
        // TODO add your handling code here:
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzo().setTool(Tool.PUNTO);
                this.estado.setText("Punto");
            }
        }
    }//GEN-LAST:event_botonPuntoActionPerformed
    /**
     * Llama al método que cambia a LINEA la herramienta activa del Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * @param evt evento que se produce al pulsar el botón botonLinea
     */
    private void botonLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLineaActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzo().setTool(Tool.LINEA);
                this.estado.setText("Linea");
            }
        }
    }//GEN-LAST:event_botonLineaActionPerformed
    /**
     * Llama al método que cambia a RECTANGULO la herramienta activa del Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * @param evt evento que se produce al pulsar el botón botonRect
     */
    private void botonRectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRectActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzo().setTool(Tool.RECTANGULO);
                this.estado.setText("Rectangulo");
            }
        }
    }//GEN-LAST:event_botonRectActionPerformed
    /**
     * Llama al método que cambia a ELIPSE la herramienta activa del Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * @param evt evento que se produce al pulsar el botón botonElipse
     */
    private void botonElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonElipseActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzo().setTool(Tool.ELIPSE);
                this.estado.setText("Elipse");
            }
        }
    }//GEN-LAST:event_botonElipseActionPerformed
    /**
     * Llama al método que cambia el valor del grosor del Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * @param evt evento que se produce al cambiar el estado de spinnerGrosor
     */
    private void spinnerGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerGrosorStateChanged
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi!= null){
                vi.getLienzo().setGrosor((Integer)spinnerGrosor.getValue());
            }
        }
    }//GEN-LAST:event_spinnerGrosorStateChanged

    /**
     * Llama al método que cambia el modo de relleno activo del Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * @param evt evento que se produce al pulsar un item de comboRelleno
     */
    private void comboRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboRellenoActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi!=null){
                switch (comboRelleno.getSelectedIndex()) {
                    case 0: //Sin relleno
                        vi.getLienzo().setModoRelleno(ModoRelleno.SIN);
                    break;
                    case 1:
                        vi.getLienzo().setModoRelleno(ModoRelleno.LISO);
                    break;
                    case 2:
                        vi.getLienzo().setModoRelleno(ModoRelleno.DEGRADADO_H);
                    break;
                    case 3:
                        vi.getLienzo().setModoRelleno(ModoRelleno.DEGRADADO_V);
                    break;
                    case 4:
                        vi.getLienzo().setModoRelleno(ModoRelleno.DEGRADADO_D);
                    break;
                    case 5:
                        vi.getLienzo().setModoRelleno(ModoRelleno.RADIAL);
                    break;
                    default:
                        throw new AssertionError();
                }
            }
        }
    }//GEN-LAST:event_comboRellenoActionPerformed
    /**
     * Llama al método que cambia el grado de transparencia del Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * @param evt evento que se produce al cambiar el estado del deslizador sliderTransp
     */
    private void sliderTranspStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderTranspStateChanged
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vActiva = (VentanaInternaImagen)escritorio.getSelectedFrame();
            float transp = this.sliderTransp.getValue()/100.0f; //Dividimos entre 100 para obtener float entre 0 y 1s 
            vActiva.getLienzo().setTransp(transp);
        }
    }//GEN-LAST:event_sliderTranspStateChanged
    /**
     * Llama al método que activa/desactiva el alisado del Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * Si estaba activado, lo desactiva. Si no, lo activa.
     * @param evt evento que se produce al pulsar el botón botonAlisar
     */
    private void botonAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAlisarActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi.getLienzo().getAlisar())    
                vi.getLienzo().setAlisar(false);
            else
                vi.getLienzo().setAlisar(true);
        }
    }//GEN-LAST:event_botonAlisarActionPerformed
    /**
     * Llama al método que activa/desactiva el atributo editar del Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * @param evt evento que se produce al pulsar el botón botonAlisar
     */
    private void botonSelecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSelecActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzo().setEditar(true);
            }
        }
    }//GEN-LAST:event_botonSelecActionPerformed

    /**
     * Crea una copia de la imagen original en la imagen fuente de esta VentanaPrincipal
     * @param evt evento que se produce cuando sliderBrillo gana el foco
     */
    private void sliderBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusGained
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
        VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                ColorModel cm = vi.getLienzo().getImage().getColorModel();
                WritableRaster raster = vi.getLienzo().getImage().copyData(null);
                boolean alfaPre = vi.getLienzo().getImage().isAlphaPremultiplied();
                imgSource = new BufferedImage(cm,raster,alfaPre,null);
            }
        }
        
    }//GEN-LAST:event_sliderBrilloFocusGained
    /**
     * Se pone a null la imagen fuente y se pone a 0 el valor del deslizador.
     * @param evt evento que se produce cuando sliderBrillo pierde el foco
     */
    private void sliderBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusLost
        imgSource = null;
        sliderBrillo.setValue(0);
    }//GEN-LAST:event_sliderBrilloFocusLost
    /**
     * 
     * @param evt evento que se produce cuando cambia el estado de sliderBrillo
     */
    private void sliderBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderBrilloStateChanged
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                if(imgSource != null){
                    try{
                        RescaleOp rop;
                        if(imgSource.getColorModel().hasAlpha()){ //Si tiene canal alfa
                            float[] scaleFactors = {1.0F, 1.0F, 1.0F, 1.0F}; //RGB, alfa
                            float brillo = this.sliderBrillo.getValue();
                            float[] offsets = {brillo, brillo, brillo, 0.0F};
                            rop = new RescaleOp(scaleFactors, offsets, null);
                        }
                        else{
                            rop = new RescaleOp(1.0F, sliderBrillo.getValue(),null);
                        }
                        rop.filter(imgSource, vi.getLienzo().getImage());
                        escritorio.repaint(); //Para que lo haga en todas las bandas
                    }catch(IllegalArgumentException e){
                        System.err.println(e.getLocalizedMessage());
                    }  

                }
            }
        }
    }//GEN-LAST:event_sliderBrilloStateChanged
    /**
     * 
     * @param evt evento que se produce al seleccionar un item de comboFiltro
     */
    private void comboFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFiltroActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                imgSource = vi.getLienzo().getImage();
                if(imgSource != null){  
                    String item = (String) comboFiltro.getSelectedItem();
                    Kernel k;
                    switch(item){
                        case "Media 3x3":
                            k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                        break;
                        case "Media 5x5":
                            float filtro5x5[] = {0.04f, 0.04f, 0.04f, 0.04f, 0.04f,
                                                   0.04f, 0.04f, 0.04f, 0.04f ,0.04f,
                                                   0.04f, 0.04f, 0.04f, 0.04f, 0.04f,
                                                   0.04f, 0.04f, 0.04f, 0.04f, 0.04f,
                                                   0.04f, 0.04f, 0.04f, 0.04f, 0.04f};
                            k = new Kernel(5,5,filtro5x5);
                        break;
                        case "Media 7x7":
                            float filtro7x7[] = {0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f,
                                                 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f,
                                                 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f,
                                                 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f,
                                                 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f,
                                                 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f,
                                                 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f};
                            k = new Kernel(7,7,filtro7x7);
                        break;
                        case "Binomial":
                            k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                        break;
                        case "Enfoque":
                            k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);            
                        break;
                        case "Relieve":
                            k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                        break;
                        case "Laplaciano":
                            k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                        break;
                        default:
                           k=null;
                        break;
                    }
                    ConvolveOp cop = new ConvolveOp(k,ConvolveOp.EDGE_NO_OP,null);
                    BufferedImage img = cop.filter(imgSource,null);
                    vi.getLienzo().setImage(img);
                    vi.repaint();
                }
            } 
        }
    }//GEN-LAST:event_comboFiltroActionPerformed
    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonCont
     */
    private void botonContActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                BufferedImage imgSource = vi.getLienzo().getImage();
                if(imgSource != null){
                    try{
                        int type = LookupTableProducer.TYPE_SFUNCION;
                        LookupTable lt  = LookupTableProducer.createLookupTable(type);
                        LookupOp lop = new LookupOp(lt, null);
                        //Imagen origen y destino iguales
                        lop.filter(imgSource, imgSource);
                        vi.repaint();
                    }catch(Exception e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_botonContActionPerformed

    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonIlu
     */
    private void botonIluActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIluActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){   
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                BufferedImage imgSource = vi.getLienzo().getImage();
                if(imgSource != null){
                    try{
                        int type = LookupTableProducer.TYPE_ROOT;
                        LookupTable lt  = LookupTableProducer.createLookupTable(type);
                        LookupOp lop = new LookupOp(lt, null);
                        //Imagen origen y destino iguales
                        lop.filter(imgSource, imgSource);
                        vi.repaint();
                    }catch(Exception e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_botonIluActionPerformed
    
    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonOsc
     */
    private void botonOscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOscActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                BufferedImage imgSource = vi.getLienzo().getImage();
                if(imgSource != null){
                    try{
                        int type = LookupTableProducer.TYPE_POWER;
                        LookupTable lt  = LookupTableProducer.createLookupTable(type);
                        LookupOp lop = new LookupOp(lt, null);
                        //Imagen origen y destino iguales
                        lop.filter(imgSource, imgSource);
                        vi.repaint();
                    }catch(Exception e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            } 
        }
    }//GEN-LAST:event_botonOscActionPerformed


    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonSin
     */
    private void botonSinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSinActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){    
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                BufferedImage imgSource = vi.getLienzo().getImage();
                if(imgSource != null){
                    try{
                        LookupTable lt  = seno(180.0/255.0);
                        LookupOp lop = new LookupOp(lt, null);
                        lop.filter(imgSource, imgSource);
                        vi.repaint();
                    }catch(Exception e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            } 
        }
    }//GEN-LAST:event_botonSinActionPerformed
    /**
     * Obtiene LookupTable usando la función seno con la velocidad angular especificada y
     * constante de normalización K=255
     * @param w velocidad angular
     * @return slt Objeto LookupTable
     */
    public LookupTable seno(double w){
        double K = 255.0; // Cte de normalización
        byte lt[] = new byte[256];
        lt[0]=0;
        for (int l=1; l<256; l++){
            lt[l] = (byte)(abs(sin(toRadians(w*l)))*K );
        }
        ByteLookupTable slt = new ByteLookupTable(0,lt);
        return slt;  
    }
    
    /**
     * Obtiene LookupTable usando la función coseno con la velocidad angular especificada y
     * constante de normalización K=255
     * @param w velocidad angular
     * @return slt Objeto LookupTable
     */
    public LookupTable coseno(double w){
        double K=255.0;
        byte lt[] = new byte[256];
        lt[0]=(byte)255;
        for(int l=1; l<256; l++){
            lt[l] = (byte)(abs(cos(toRadians(w*l)))*K );
        }
        
        ByteLookupTable slt = new ByteLookupTable(0,lt);
        return slt;
        
    }


    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonBandas
     */
    private void botonBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBandasActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                imgSource = vi.getLienzo().getImage();
                if(imgSource != null){                
                    int numBandas = imgSource.getColorModel().getNumColorComponents();
                    for(int i=0; i<numBandas; i++){
                        VentanaInternaImagen v = new VentanaInternaImagen(this);
                        BufferedImage banda = getBand(i,imgSource);
                        v.getLienzo().setImage(banda);
                        escritorio.add(v);
                        v.setVisible(true);
                        v.setTitle(vi.getTitle()+"["+i+"]");
                        
                        Rectangle2D rect= new Rectangle2D.Double(0,0,banda.getWidth(), banda.getHeight());
                        v.getLienzo().setAreaClip(rect);  
                    }                
                }         
            } 
        }            
    }//GEN-LAST:event_botonBandasActionPerformed
    /**
     * 
     * @param evt evento que se produce al seleccionar un item de comboEspacioColor
     */
    private void comboEspacioColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboEspacioColorActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                imgSource = vi.getLienzo().getImage();
                if(imgSource != null){                               
                    String espacio = (String)comboEspacioColor.getSelectedItem();
                    ColorSpace cs = null;
                    //Comprobamos si la imagen ya está en el espacio solicitado
                    if(espacio == "sRGB" && !imgSource.getColorModel().getColorSpace().isCS_sRGB()){
                        cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);                    
                    }else if(espacio == "GREY" && imgSource.getColorModel().getNumColorComponents()>1){ //Si nº bandas>1, no gris
                        cs = ColorSpace.getInstance(ColorSpace.CS_GRAY); 
                    }else{
                        cs = ColorSpace.getInstance(ColorSpace.CS_PYCC); 
                    }

                    if(cs != null){
                        ColorConvertOp cop = new ColorConvertOp(cs,null);
                        BufferedImage imgOut = cop.filter(imgSource,null);
                        VentanaInternaImagen v = new VentanaInternaImagen(this);
                        escritorio.add(v);
                        v.setVisible(true);                       
                        v.getLienzo().setImage(imgOut);                        
                        v.setTitle(vi.getTitle()+"["+colorSpaceToString(imgOut)+"]");
                        Rectangle2D rect= new Rectangle2D.Double(0,0,imgOut.getWidth(), imgOut.getHeight());
                        v.getLienzo().setAreaClip(rect);  
                        v.repaint();
                    }

                }
            }
        }
    }//GEN-LAST:event_comboEspacioColorActionPerformed

    
    private void giro(double grados){
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                imgSource = vi.getLienzo().getImage();
                if(imgSource != null){  
                    double r = Math.toRadians(grados);
                    Point p = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
                    AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.repaint();
                }   
            } 
        }
    }
    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonGiro90
     */
    private void botonGiro90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGiro90ActionPerformed
        giro(90);     
    }//GEN-LAST:event_botonGiro90ActionPerformed
    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonGiro180
     */
    private void botonGiro180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGiro180ActionPerformed
        giro(180);    
    }//GEN-LAST:event_botonGiro180ActionPerformed
    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonGiro270 
     */
    private void botonGiro270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGiro270ActionPerformed
        giro(270);       
    }//GEN-LAST:event_botonGiro270ActionPerformed
    /**
     * 
     * @param evt evento que se produce cuando sliderGiro gana el foco
     */
    private void sliderGiroFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderGiroFocusGained
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                ColorModel cm = vi.getLienzo().getImage().getColorModel();
                WritableRaster raster = vi.getLienzo().getImage().copyData(null);
                boolean alfaPre = vi.getLienzo().getImage().isAlphaPremultiplied();
                imgSource = new BufferedImage(cm,raster,alfaPre,null);
            }   
        }
    }//GEN-LAST:event_sliderGiroFocusGained
    /**
     * 
     * @param evt evento que se produce cuando sliderGiro gana el foco
     */
    private void sliderGiroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderGiroFocusLost
        imgSource = null;     
    }//GEN-LAST:event_sliderGiroFocusLost
    /**
     * 
     * @param evt evento que se produce cuando cambia el estado de sliderGiro
     */
    private void sliderGiroStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGiroStateChanged
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                if(imgSource != null){  
                    double r = Math.toRadians(sliderGiro.getValue());
                    Point p = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
                    AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.repaint();
                }   
            } 
        }        
    }//GEN-LAST:event_sliderGiroStateChanged

    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonMas
     */
    private void botonMasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMasActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                imgSource = vi.getLienzo().getImage();
                if(imgSource != null){  
                    AffineTransform at = AffineTransform.getScaleInstance(1.25, 1.25);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.repaint();
                }   
            }  
        }
    }//GEN-LAST:event_botonMasActionPerformed
    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonMenos
     */
    private void botonMenosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMenosActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                imgSource = vi.getLienzo().getImage();
                if(imgSource != null){  
                    AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.repaint();
                }   
            }   
        }
    }//GEN-LAST:event_botonMenosActionPerformed
    /**
     * Aplica operación SepiaOp la imagen del Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * Llama al método filter de la clase SepiaOp con la imagen original como fuente y destino.
     * Actualiza la imagen del objeto Lienzo2DImagen. Redibuja.
     * @param evt evento que se produce al pulsar el botón botonSepia
     */
    private void botonSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSepiaActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){   
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                imgSource = vi.getLienzo().getImage();
                if(imgSource != null){  
                    SepiaOp sop = new SepiaOp();
                    BufferedImage img = sop.filter(imgSource, imgSource);
                    vi.getLienzo().setImage(img);
                    vi.repaint();
                }
            }
        }
    }//GEN-LAST:event_botonSepiaActionPerformed

    private void escritorioMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_escritorioMouseMoved
        
        
    }//GEN-LAST:event_escritorioMouseMoved
    
    /**
     * Clase manejadora de eventos de audio
     */
    class ManejadorAudio implements LineListener{
        @Override
        /**
         * Si el evento es de tipo START: desactiva botonPlay y activa botonStop
         * Si el evento es de tipo STOP: activa botonPlay y descativa botonStop
         */
        public void update (LineEvent event){
            if(event.getType() == LineEvent.Type.START){ 
                botonPlay.setEnabled(false);
                botonStop.setEnabled(true);
            }
            if(event.getType() == LineEvent.Type.STOP){ 
                botonPlay.setEnabled(true);
                botonStop.setEnabled(false);
            }
            if(event.getType() == LineEvent.Type.CLOSE){ 
            }
        }
    }
    /**
     * Clase manejadora de eventos de grabación de audio
     */
    class ManejadorGrabacion implements LineListener{
        @Override
        public void update (LineEvent event){
            if(event.getType() == LineEvent.Type.START){ 
                
            }
            if(event.getType() == LineEvent.Type.STOP){ 

            }
            if(event.getType() == LineEvent.Type.CLOSE){ 
            }
        }
    }
    /**
     * 
     * @param evt evento que se produce al seleccionar un item de comboTrazo
     */
    private void comboTrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTrazoActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi= (VentanaInternaImagen)escritorio.getSelectedFrame();
            String trazo = (String) comboTrazo.getSelectedItem();
            if(vi != null){
                vi.getLienzo().setEstiloTrazo(trazo);                
            }
        }
    }//GEN-LAST:event_comboTrazoActionPerformed
    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonNeg
     */
    private void botonNegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNegActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                BufferedImage imgSource = vi.getLienzo().getImage();
                if(imgSource != null){
                    try{
                        int type = LookupTableProducer.TYPE_NEGATIVE;
                        LookupTable lt  = LookupTableProducer.createLookupTable(type);
                        LookupOp lop = new LookupOp(lt, null);
                        //Imagen origen y destino iguales
                        lop.filter(imgSource, imgSource);
                        vi.repaint();
                    }catch(Exception e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            } 
        }
    }//GEN-LAST:event_botonNegActionPerformed
    /**
     * Muestra mensaje con información sobre la aplicación.
     * @param evt evento que se produce al selecionar el item de menú menuInfo
     */
    private void menuInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuInfoActionPerformed
        String msg = "Aplicación multimedia 1.0 \nElena Romero Contreras";
        JOptionPane.showMessageDialog(null,msg);
    }//GEN-LAST:event_menuInfoActionPerformed
    /**
     * 
     * @param evt evento que se produce al seleccionar un item de comboOrden
     */
    private void comboOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboOrdenActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi= (VentanaInternaImagen)escritorio.getSelectedFrame();
            String orden = (String) comboOrden.getSelectedItem();
            if(vi != null){
                vi.getLienzo().setOrden(orden);                
            } 
        }
    }//GEN-LAST:event_comboOrdenActionPerformed
    /**
     * Llama al método que modifica el color de trazo del Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * Si se activa sin estar seleccionada una VentanaInternaImagen, no se hace nada
     * @param evt evento que se activa al pulsar item del combo box comboColorTrazo
     */
    private void comboColorTrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboColorTrazoActionPerformed
        VentanaInternaImagen vi= (VentanaInternaImagen)escritorio.getSelectedFrame();
        if(vi != null){
            Color color = (Color)comboColorTrazo.getSelectedItem();
            vi.getLienzo().setColorTrazo(color);                
        }
    }//GEN-LAST:event_comboColorTrazoActionPerformed
    /**
     * Llama al método que modifica el color de relleno de fondo del Lienzo2DImagen
     * de la VentanaInternaImagen seleccionada.
     * Si se activa sin estar seleccionada una VentanaInternaImagen, no se hace nada
     * @param evt evento que se activa al pulsar item del combo box comboColor2
     */
    private void comboColor2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboColor2ActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){    
            VentanaInternaImagen vi= (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                Color color = (Color)comboColor2.getSelectedItem();
                vi.getLienzo().setColor2(color);                
            }  
        }
    }//GEN-LAST:event_comboColor2ActionPerformed
    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonTintar
     */
    private void bontonTintarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bontonTintarActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi!=null){   
                BufferedImage imgSource = vi.getLienzo().getImage();
                if(imgSource != null){
                    try{
                        TintOp tintado = new TintOp(vi.getLienzo().getColor(),0.5f);
                        tintado.filter(imgSource, imgSource);
                        vi.getLienzo().repaint();
                    }catch(IllegalArgumentException e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_bontonTintarActionPerformed
    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonEcualizador
     */
    private void botonEcualizadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEcualizadorActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi!=null){   
                BufferedImage imgSource = vi.getLienzo().getImage();
                if(imgSource != null){
                    try{
                        EqualizationOp ecua = new EqualizationOp();
                        ecua.filter(imgSource, imgSource);
                        vi.getLienzo().repaint();
                    }catch(IllegalArgumentException e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_botonEcualizadorActionPerformed

    /**
     * Llama al método que cambia a LIBRE la herramienta activa del Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * @param evt evento que se produce al pulsar el botón botonLibre
     */
    private void botonLibreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLibreActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzo().setTool(Tool.LIBRE);
                this.estado.setText("Trazo libre");
            }
        }
    }//GEN-LAST:event_botonLibreActionPerformed

    /**
     * Llama al método que cambia a ROUND_RECT la herramienta activa del Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * @param evt evento que se produce al pulsar el botón botonRoundRect
     */
    private void botonRoundRectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRoundRectActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzo().setTool(Tool.ROUND_RECT);
                this.estado.setText("Rectángulo redondeado");
            }
        }
    }//GEN-LAST:event_botonRoundRectActionPerformed

    /**
     * Llama al método que cambia a CORONA la herramienta activa del Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * @param evt evento que se produce al pulsar el botón botonCorona
     */
    private void botonCoronaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCoronaActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzo().setTool(Tool.CORONA);
                this.estado.setText("Corona circular");
            }  
        }
    }//GEN-LAST:event_botonCoronaActionPerformed

    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonColorT
     */
    private void botonColorTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonColorTActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                JColorChooser selectorColor = new JColorChooser();
                Color color = selectorColor.showDialog(null, "Seleccione un color", Color.BLACK);
                vi.getLienzo().setColorTrazo(color);
                comboColorTrazo.addItem(color); //Lo añado al combo de colores y lo selecciono
                comboColorTrazo.setSelectedItem(color);
            }
        }
    }//GEN-LAST:event_botonColorTActionPerformed
    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonColor1 
     */
    private void botonColor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonColor1ActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                JColorChooser selectorColor = new JColorChooser();
                Color color = selectorColor.showDialog(null, "Seleccione un color", Color.BLACK);
                comboColor1.addItem(color); //Lo añado al combo de colores y lo selecciono
                comboColor1.setSelectedItem(color);
                vi.getLienzo().setColor(color);
            }
        }
    }//GEN-LAST:event_botonColor1ActionPerformed
    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonColor2
     */
    private void botonColor2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonColor2ActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                JColorChooser selectorColor = new JColorChooser();
                Color color = selectorColor.showDialog(null, "Seleccione un color", Color.BLACK);
                vi.getLienzo().setColor2(color);
                comboColor2.addItem(color);
                comboColor2.setSelectedItem(color);
            } 
        }
    }//GEN-LAST:event_botonColor2ActionPerformed
    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonCaptura
     */
    private void botonCapturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCapturaActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaCamara){
            VentanaInternaCamara vi =  (VentanaInternaCamara)escritorio.getSelectedFrame();
            if(vi!=null){
                BufferedImage img = vi.getCamera().getImage();
                VentanaInternaImagen v = new VentanaInternaImagen(this);
                v.getLienzo().setImage(img);
                this.escritorio.add(v);
                v.setTitle("Captura ["+colorSpaceToString(img)+"]");
                v.setVisible(true);       
                Rectangle2D rect= new Rectangle2D.Double(0,0,img.getWidth(), img.getHeight());
                v.getLienzo().setAreaClip(rect);
                botonGuardar.setEnabled(true);
                barraDibujo.setVisible(true);
                barraImagen.setVisible(true);
            }
        }
    }//GEN-LAST:event_botonCapturaActionPerformed
    /**
     * Llama al método que cambia a CURVA la herramienta activa del Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * @param evt evento que se produce al pulsar el botón botonCurva
     */
    private void botonCurvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCurvaActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                vi.getLienzo().setTool(Tool.CURVA);
                this.estado.setText("Curva con un punto de control");
            }
        }        
    }//GEN-LAST:event_botonCurvaActionPerformed

    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonDuplicar
     */
    private void botonDuplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDuplicarActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                imgSource = vi.getLienzo().getImage();
                if(imgSource != null){ 
                    //Copiamos imagen de la ventana actual
                    ColorModel cm = vi.getLienzo().getImage().getColorModel();
                    WritableRaster raster = vi.getLienzo().getImage().copyData(null);
                    boolean alfaPre = vi.getLienzo().getImage().isAlphaPremultiplied();
                    BufferedImage copia = new BufferedImage(cm,raster,alfaPre,null);
                    //Crea nueva ventana interna con la copia
                    VentanaInternaImagen copiavi = new VentanaInternaImagen(this);
                    copiavi.getLienzo().setImage(copia);
                    copiavi.setTitle(vi.getTitle());        
                    Rectangle2D rect= new Rectangle2D.Double(0,0,copia.getWidth(), copia.getHeight());      
                    copiavi.getLienzo().setAreaClip(rect);
                    this.escritorio.add(copiavi); 
                    copiavi.setVisible(true); 
                }
            }
        }
    }//GEN-LAST:event_botonDuplicarActionPerformed

    /**
     * Aplica operación OperacionPixel a la imagen del Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * Llama al método filter de la clase OperaciónPixel con la imagen original como fuente y destino.
     * Actualiza la imagen del objeto Lienzo2DImagen. Redibuja.
     * @param evt evento que se produce al pulsar el botón botonOpPixel
     */
    private void botonOpPixelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOpPixelActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                imgSource = vi.getLienzo().getImage();
                if(imgSource != null){  
                    OperacionPixel sop = new OperacionPixel();
                    BufferedImage img = sop.filter(imgSource, imgSource);
                    vi.getLienzo().setImage(img);
                    vi.repaint();
                }
            } 
        }
    }//GEN-LAST:event_botonOpPixelActionPerformed
    /**
     * 
     * @param evt evento que se produce al marcar/desmarcar la casilla checkBoxAudio
     */
    private void checkBoxAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAudioActionPerformed
        this.barraAudio.setVisible(checkBoxAudio.getState());
    }//GEN-LAST:event_checkBoxAudioActionPerformed

    /**
     * 
     * @param evt evento que se produce al pulsar el botón botonWebcam
     */
    private void botonWebcamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonWebcamActionPerformed
        VentanaInternaCamara vi = new VentanaInternaCamara();
        escritorio.add(vi);
        vi.setVisible(true);
        vi.setTitle("Webcam"); 
        botonCaptura.setVisible(true);
    }//GEN-LAST:event_botonWebcamActionPerformed

    /**
     * 
     * @param evt evento que se produce al pulsar el item de menú menuGuardar
     */
    private void menuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarActionPerformed
        // TODO add your handling code here:
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi!=null){
                String[] extImagen = ImageIO.getReaderFormatNames();
                FileFilter filter = new FileNameExtensionFilter("Fichero de imagen", extImagen);

                JFileChooser dlg = new JFileChooser();
                dlg.setFileFilter(filter);
                dlg.setAcceptAllFileFilterUsed(false);

                int resp = dlg.showSaveDialog(this);
                if(resp == JFileChooser.APPROVE_OPTION){
                    try{
                        BufferedImage img=vi.getLienzo().getImage(true);
                        if(img!=null){
                            File f=dlg.getSelectedFile();
                            String fname = f.getName();
                            String extension = fname.substring(fname.lastIndexOf(".")+1);
                            ImageIO.write(img, extension, f);
                            vi.setTitle(f.getName());
                        }
                    }catch(Exception ex){
                        JOptionPane.showMessageDialog(null,"Error al guardar la imagen", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_menuGuardarActionPerformed
    /**
     * 
     * @param evt evento que se produce al pulsar el item de menú menuAbrir 
     */
    private void menuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbrirActionPerformed

        JFileChooser dlg = new JFileChooser();
        //Indicamos formatos admitidos
        String[] extAudio = {"wav", "au"};
        String[] extImagen = ImageIO.getReaderFormatNames();
        String[] extVideo = VideoFileFilter.INSTANCE.getExtensions();
        
        FileFilter filterImg = new FileNameExtensionFilter("Fichero de imagen", extImagen);
        FileFilter filterVideo = new FileNameExtensionFilter("Fichero de vídeo", extVideo);
        FileFilter filterAudio = new FileNameExtensionFilter("Fichero de sonido", extAudio);
        
        dlg.setFileFilter(filterAudio);
        dlg.setFileFilter(filterImg);
        dlg.setFileFilter(filterVideo);   
        dlg.setAcceptAllFileFilterUsed(false);

        int resp = dlg.showOpenDialog(this);
        if(resp == JFileChooser.APPROVE_OPTION){
            try{
                File f = dlg.getSelectedFile();
                String fname = f.getName();
                String extension = fname.substring(fname.lastIndexOf(".")+1);
                //Según el tipo de archivo abrimos una ventana u otra
                if(Arrays.asList(extImagen).contains(extension)){
                    BufferedImage img = ImageIO.read(f);
                    VentanaInternaImagen vi = new VentanaInternaImagen(this);
                    vi.getLienzo().setImage(img);
                    Rectangle2D rect= new Rectangle2D.Double(0,0,img.getWidth(), img.getHeight());
                    vi.getLienzo().setAreaClip(rect);
                    this.escritorio.add(vi);
                    vi.setTitle(fname+" ["+colorSpaceToString(img)+"]");
                    vi.setVisible(true);
                    //Mostramos barra de gráficos e imagen
                    barraImagen.setVisible(true);
                    barraDibujo.setVisible(true);
                    botonGuardar.setEnabled(true);
                }else if(Arrays.asList(extVideo).contains(extension)){  
                    VentanaInternaVLCPlayer vi = new VentanaInternaVLCPlayer(f);
                    escritorio.add(vi);
                    vi.setVisible(true);
                    vi.setTitle(fname);
                    barraAudio.setVisible(true);
                }else if(Arrays.asList(extAudio).contains(extension)){
                    File file = new File(f.toString()){
                        @Override
                        public String toString(){
                            return this.getName();
                        }
                    };
                    listaAudio.addItem(file);
                    barraAudio.setVisible(true);
                }
            }catch(Exception ex){
                JOptionPane.showMessageDialog(null,"Error al leer el fichero", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_menuAbrirActionPerformed

    /**
     * Pasa a String el espacio de color en el que se encuentra la imagen especificada
     * @param img imagen especificada
     * @return string con espacio de color
     */
    private String colorSpaceToString(BufferedImage img){
        String space;
        if(img.getColorModel().getColorSpace().isCS_sRGB())
            space = "RGB";
        else if(img.getColorModel().getColorSpace().getNumComponents()>1)
            space = "YCC";
        else
            space="GREY";
            
        return space;
    }
    /**
     * Crea nueva VentanaInternaImagen con lienzo del tamaño seleccionado.
     * Muestra diálogo para seleccionar tamaño del objeto Lienzo2DImagen de la nueva VentanaInternaImagen.
     * Establecemos título de la ventana y área clip. Mostramos barras de herramientas de gráficos e imágenes.
     * @param evt evento que se produce al pulsar el item de menú menuNuevo
     */
    private void menuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNuevoActionPerformed

        JTextField anchoInput = new JTextField("700");
        JTextField altoInput = new JTextField("400");
        Object [] msg = {"\nAncho: ", anchoInput, "\nAlto: ", altoInput};
        int resp = JOptionPane.showOptionDialog(null, msg,"Tamaño imagen",JOptionPane.DEFAULT_OPTION,
            JOptionPane.QUESTION_MESSAGE,null,null,msg);
        int ancho_img = Integer.parseInt(anchoInput.getText());
        int alto_img = Integer.parseInt(altoInput.getText());
       
        //Creamos ventana interna
        VentanaInternaImagen vi = new VentanaInternaImagen(this);
        escritorio.add(vi);
        vi.setVisible(true);
        vi.setTitle("Nueva");
        BufferedImage img =  new BufferedImage(ancho_img,alto_img,BufferedImage.TYPE_INT_RGB);
        //Color de fondo blanco
        Rectangle2D rect= new Rectangle2D.Double(0,0,ancho_img, alto_img);
        Graphics2D g = img.createGraphics();
        g.setPaint(Color.WHITE);
        g.fill(rect);
        vi.getLienzo().setAreaClip(rect);
        vi.getLienzo().setImage(img);
        
        //Mostramos barra de gráficos e imagen
        barraImagen.setVisible(true);
        barraDibujo.setVisible(true);
        botonGuardar.setEnabled(true);
    }//GEN-LAST:event_menuNuevoActionPerformed
    /**
     * Aplica operación OperacionComp a la imagen del Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * Llama al método filter de la clase OperaciónComp con la imagen original como fuente y destino.
     * Redibuja.
     * @param evt evento que se produce al pulsar el botón botonOpComp
     */
    private void botonOpCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOpCompActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                imgSource = vi.getLienzo().getImage();
                if(imgSource != null){  
                    OperacionComp op = new OperacionComp();
                    BufferedImage img = op.filter(imgSource, imgSource);
                    vi.getLienzo().setImage(img);
                    vi.repaint();
                }
            } 
        }        
    }//GEN-LAST:event_botonOpCompActionPerformed
    /**
     * Aplica operación basada en la función coseno a la imagen del Lienzo2DImagen de la VentanaInternaImagen seleccionada.
     * Redibuja.
     * @param evt evento que se produce al pulsar el botón botonCos
     */
    private void botonCosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCosActionPerformed
        if(escritorio.getSelectedFrame() instanceof VentanaInternaImagen){    
            VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
            if(vi != null){
                BufferedImage imgSource = vi.getLienzo().getImage();
                if(imgSource != null){
                    try{
                        LookupTable lt  = coseno(180.0/255.0);
                        LookupOp lop = new LookupOp(lt, null);
                        lop.filter(imgSource, imgSource);
                        vi.repaint();
                    }catch(Exception e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            } 
        }      
    }//GEN-LAST:event_botonCosActionPerformed
    
    /**
     * Crea un SMClipPlayer a partir del archivo seleccionado en listaAudio y si no es nulo, lo reproduce.
     * @param evt evento que se produce al pulsar el botón botonPlay
     */
    private void botonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPlayActionPerformed
        File f = (File)listaAudio.getSelectedItem();
        if(f!=null){
            player = new SMClipPlayer(f);
            ((SMClipPlayer)player).addLineListener(new ManejadorAudio());
            if(player != null){
                player.play();
            }
        }
    }//GEN-LAST:event_botonPlayActionPerformed
    
    /**
     * Si el archivo seleccionado en listaAudio no es nulo y el objeto player tampoco, para la reproducción
     * @param evt evento que se produce al pulsar el botón botonStop
     */
    private void botonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonStopActionPerformed
        File f = (File)listaAudio.getSelectedItem();
        if(f!=null){
            if(player != null){
                player.stop();
            }

        } 
    }//GEN-LAST:event_botonStopActionPerformed
    /**
     * Si se activa el botón, se crea SMSoundRecorder a partir del fichero especificado
     * en el cuadro de diálogo mostrado y se llama al método que graba. Si se desactiva, se para 
     * la grabación llamando al método para parar de  la clase SMSoundRecorder.
     * @param evt evento que se produce al pulsar el botón botonGrabar
     */
    private void botonGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGrabarActionPerformed
              
        if(botonGrabar.isSelected()){
            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
            if(resp == JFileChooser.APPROVE_OPTION){
                try{               
                    File f=dlg.getSelectedFile();
                    if(f!=null){
                        recorder = new SMSoundRecorder(f);
                        ((SMSoundRecorder)recorder).addLineListener(new ManejadorGrabacion());
                        recorder.record(); 
                    } 
                }catch(Exception ex){
                    System.err.println("Error");
                }
            }
        }else{
            if(recorder != null){
                recorder.stop();
                //listaAudio.addItem();
            }            
        }
    }//GEN-LAST:event_botonGrabarActionPerformed


    
    /**
     * Obtiene imagen de la banda de color con el índice especificado de la imagen especificada.
     * Se crea el ComponentColorModel de la nueva imagen basado en un espacio de color GRAY.
     * Se crea el nuevo WritableRaster a partir del raster de la imagen original.
     * Se crea una nueva BufferedImage que contiene como raster el correspondiente a la banda
     * @param iBanda índice de la banda
     * @param img imagen cuya banda se obtiene
     * @return imagen que contiene como raster el correspondiente a la banda.
     */
    private BufferedImage getBand(int iBanda, BufferedImage img){
        
        ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
        ComponentColorModel cm = new ComponentColorModel(cs,false, false, Transparency.OPAQUE, DataBuffer.TYPE_BYTE);
        
        int bandList[] = {iBanda};
        WritableRaster bandRaster = (WritableRaster)img.getRaster().createWritableChild(0,0,
                                        img.getWidth(),img.getHeight(),0,0,bandList);
        
        BufferedImage imgBanda = new BufferedImage(cm, bandRaster, false, null);
        
        return imgBanda;       
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar barraAudio;
    private javax.swing.JToolBar barraDibujo;
    private javax.swing.JToolBar barraGeneral;
    private javax.swing.JToolBar barraImagen;
    private javax.swing.JButton bontonTintar;
    private javax.swing.JButton botonAbrir;
    private javax.swing.JToggleButton botonAlisar;
    private javax.swing.JButton botonBandas;
    private javax.swing.JButton botonCaptura;
    private javax.swing.JButton botonColor1;
    private javax.swing.JButton botonColor2;
    private javax.swing.JButton botonColorT;
    private javax.swing.JButton botonCont;
    private javax.swing.JToggleButton botonCorona;
    private javax.swing.JButton botonCos;
    private javax.swing.JToggleButton botonCurva;
    private javax.swing.JButton botonDuplicar;
    private javax.swing.JButton botonEcualizador;
    private javax.swing.JToggleButton botonElipse;
    private javax.swing.JButton botonGiro180;
    private javax.swing.JButton botonGiro270;
    private javax.swing.JButton botonGiro90;
    private javax.swing.JToggleButton botonGrabar;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JButton botonIlu;
    private javax.swing.JToggleButton botonLibre;
    private javax.swing.JToggleButton botonLinea;
    private javax.swing.JButton botonMas;
    private javax.swing.JButton botonMenos;
    private javax.swing.JButton botonNeg;
    private javax.swing.JButton botonNuevo;
    private javax.swing.JButton botonOpComp;
    private javax.swing.JButton botonOpPixel;
    private javax.swing.JButton botonOsc;
    private javax.swing.JButton botonPlay;
    private javax.swing.JToggleButton botonPunto;
    private javax.swing.JToggleButton botonRect;
    private javax.swing.JToggleButton botonRoundRect;
    private javax.swing.JToggleButton botonSelec;
    private javax.swing.JButton botonSepia;
    private javax.swing.JButton botonSin;
    private javax.swing.JButton botonStop;
    private javax.swing.JButton botonWebcam;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBoxMenuItem checkBoxAudio;
    private javax.swing.JCheckBoxMenuItem checkBoxEstado;
    private javax.swing.JCheckBoxMenuItem checkBoxGraficos;
    private javax.swing.JCheckBoxMenuItem checkBoxImagen;
    /*
    private javax.swing.JComboBox<String> comboColor1;
    */
    private javax.swing.JComboBox<Color> comboColor1;
    /*
    private javax.swing.JComboBox<String> comboColor2;
    */
    private javax.swing.JComboBox<Color> comboColor2;
    /*
    private javax.swing.JComboBox<String> comboColorTrazo;
    */
    private javax.swing.JComboBox<Color> comboColorTrazo;
    private javax.swing.JComboBox<String> comboEspacioColor;
    private javax.swing.JComboBox<String> comboFiltro;
    private javax.swing.JComboBox<String> comboOrden;
    private javax.swing.JComboBox<String> comboRelleno;
    private javax.swing.JComboBox<String> comboTrazo;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JLabel estado;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelCoord;
    private javax.swing.JComboBox<File> listaAudio;
    private javax.swing.JMenuItem menuAbrir;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JMenuItem menuGuardar;
    private javax.swing.JMenuItem menuInfo;
    private javax.swing.JMenuItem menuNuevo;
    private javax.swing.JMenu menuVer;
    private javax.swing.JPanel panelHerr;
    private javax.swing.JPanel panelInferior;
    private javax.swing.JPanel panelRelleno;
    private javax.swing.JPanel panelSelec;
    private javax.swing.JPanel panelSuperior;
    private javax.swing.JPanel panelTransp;
    private javax.swing.JPanel panelTrazo;
    private javax.swing.JSlider sliderBrillo;
    private javax.swing.JSlider sliderGiro;
    private javax.swing.JSlider sliderTransp;
    private javax.swing.JSpinner spinnerGrosor;
    // End of variables declaration//GEN-END:variables
}
